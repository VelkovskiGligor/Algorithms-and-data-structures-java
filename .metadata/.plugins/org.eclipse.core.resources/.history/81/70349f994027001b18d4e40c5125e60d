import java.util.NoSuchElementException;

interface Queue<E>{
	public void clear();
	public boolean isEmpty();
	public int size();
	public E peek();
	public void enqueue(E x);
	public E dequeue();
}
class SLLNode<E>{
	protected E element;
	protected SLLNode<E> succ;
	public SLLNode(E el,SLLNode<E> succ) {
		this.element=el;
		this.succ=succ;
	}
}
class LinkedQueue<E> implements Queue<E>{
	private SLLNode<E> front;
	private SLLNode<E> rear;
	private int lenght;
	public LinkedQueue() {
		clear();
	}
	@Override
	public void clear() {
		front=rear=null;
		lenght=0;
	}

	@Override
	public boolean isEmpty() {
		return lenght==0;
	}

	@Override
	public int size() {
		return lenght;
	}

	@Override
	public E peek() {
		if(front!=null) {
			return front.element;
		}else {
			throw new NoSuchElementException();
		}
		
	}

	@Override
	public void enqueue(E x) {
		SLLNode<E> nov=new SLLNode<E>(x,null);
		rear.succ=nov;
		rear=nov;
		lenght++;
		if(front==null) {
			front=rear;
		}
		
	}

	@Override
	public E dequeue() {
		// TODO Auto-generated method stub
		return null;
	}
	
}
public class redica {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
